# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pubsub_pb2 as pubsub__pb2


class pubsubStub(object):
    """Interface between pub/sub server and publisher, subscriber
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTheme = channel.unary_unary(
                '/pubsub/getTheme',
                request_serializer=pubsub__pb2.Request.SerializeToString,
                response_deserializer=pubsub__pb2.themeList.FromString,
                )
        self.subscribe = channel.unary_unary(
                '/pubsub/subscribe',
                request_serializer=pubsub__pb2.theme.SerializeToString,
                response_deserializer=pubsub__pb2.theme.FromString,
                )
        self.createTheme = channel.unary_unary(
                '/pubsub/createTheme',
                request_serializer=pubsub__pb2.theme.SerializeToString,
                response_deserializer=pubsub__pb2.theme.FromString,
                )
        self.publish = channel.unary_unary(
                '/pubsub/publish',
                request_serializer=pubsub__pb2.pub.SerializeToString,
                response_deserializer=pubsub__pb2.theme.FromString,
                )


class pubsubServicer(object):
    """Interface between pub/sub server and publisher, subscriber
    """

    def getTheme(self, request, context):
        """subscriber require for the list of theme
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribe(self, request, context):
        """subsciber subscribe the theme
        two themes will be the same if successful
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createTheme(self, request, context):
        """publisher create a theme
        two themes will be the same if successful
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publish(self, request, context):
        """publisher publish a message 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_pubsubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTheme': grpc.unary_unary_rpc_method_handler(
                    servicer.getTheme,
                    request_deserializer=pubsub__pb2.Request.FromString,
                    response_serializer=pubsub__pb2.themeList.SerializeToString,
            ),
            'subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribe,
                    request_deserializer=pubsub__pb2.theme.FromString,
                    response_serializer=pubsub__pb2.theme.SerializeToString,
            ),
            'createTheme': grpc.unary_unary_rpc_method_handler(
                    servicer.createTheme,
                    request_deserializer=pubsub__pb2.theme.FromString,
                    response_serializer=pubsub__pb2.theme.SerializeToString,
            ),
            'publish': grpc.unary_unary_rpc_method_handler(
                    servicer.publish,
                    request_deserializer=pubsub__pb2.pub.FromString,
                    response_serializer=pubsub__pb2.theme.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class pubsub(object):
    """Interface between pub/sub server and publisher, subscriber
    """

    @staticmethod
    def getTheme(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub/getTheme',
            pubsub__pb2.Request.SerializeToString,
            pubsub__pb2.themeList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub/subscribe',
            pubsub__pb2.theme.SerializeToString,
            pubsub__pb2.theme.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createTheme(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub/createTheme',
            pubsub__pb2.theme.SerializeToString,
            pubsub__pb2.theme.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub/publish',
            pubsub__pb2.pub.SerializeToString,
            pubsub__pb2.theme.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
